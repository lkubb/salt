.. _release-3006:

=========================================
Salt 3006 release notes - Codename Sulfur
=========================================

Salt 3006 is currently under development.


Onedir packaging
----------------
Going forward from the 3006 release, the Salt Project will only provide onedir
packages to install or upgrade Salt. The classic, non-onedir packages will not
be provided for supported operating systems. See
`Upgrade to onedir <https://docs.saltproject.io/salt/install-guide/en/latest/topics/upgrade-to-onedir.html>`_
in the `Salt Install Guide <https://docs.saltproject.io/salt/install-guide/en/latest/#>`_
for information about upgrading from the classic packages to the onedir
packages.


Dropping support for Python 3.5 and 3.6
---------------------------------------

Python 3.5 and 3.6 will no longer be supported by Salt since they
are end of life. Going forward our policy will be to align with Python's
supported versions. See
`Salt support for Python versions <https://docs.saltproject.io/salt/install-guide/en/latest/topics/salt-python-version-support.html>`_
for more information.


All salt-api functionality disabled by default
----------------------------------------------

All netapi clients, which provide the functionality to salt-api, will now
be disabled by default. If you use the salt-api you must add the new
`netapi_enable_clients` option to your salt master config. This is
a breaking change and the salt-api will not function without this
new configuration option.
See `Netapi module <https://docs.saltproject.io/en/latest/topics/netapi/index.html#introduction-to-netapi-modules>`
for more information.


How do I migrate to the onedir packages?
----------------------------------------
The migration path from the classic, non-onedir packages to the onedir packages
will include:

* Repo File: You need to update your repo file to point to the new repo paths
  for your platform. After the repo file is updated, upgrade your Salt packages.
* Pip packages: You need to ensure any 3rd party pip packages are installed in
  the correct onedir path. This can be accomplished in two ways:

  * ``salt-pip install <package name>``
  * Using the ``pip.installed`` Salt state.

To install python packages into the system python environment, user's must now
provide the ``pip_bin`` or ``bin_env`` to the pip state module.

For example:

.. code-block:: yaml

    lib-foo:
      pip.installed:
        - pip_bin: /usr/bin/pip3
    lib-bar:
      pip.installed:
        - bin_env: /usr/bin/python3


Improved Vault integration
--------------------------
This release features a much deeper integration with Hashicorp Vault.

Previously, the Salt master only issued tokens to minions, whose policies could be
templated with grain values. In addition to allowing secure templating of those
policies with pillar values, the Salt master can now be configured to issue AppRoles
to minions and manage their metadata using a similar templating approach.
Since this metadata can be taken advantage of in templated policies on the Vault side,
the need for many boilerplate policies is significantly reduced:

.. code-block:: vaultpolicy

  path "salt/data/minions/{{identity.entity.metadata.minion-id}}" {
      capabilities = ["create", "read", "write", "delete", "patch"]
  }

  path "salt/data/roles/{{identity.entity.metadata.role}}" {
      capabilities = ["read"]
  }

To take full advantage of this new flexibility, the Vault external pillar
can now also be templated with pillar values:

.. code-block:: yaml

  ext_pillar:
    - vault: path=salt/minions/{minion}
    - vault: path=salt/roles/{pillar[role]}

Although existing configurations will keep working without intervention after upgrading
the Salt master, it is strongly recommended to adjust the ``peer_run`` configuration to
include the new issuance endpoints in order to reduce unnecessary overhead:

.. code-block:: yaml

  peer_run:
    .*:
      - vault.get_config
      - vault.generate_new_token

Please see the :ref:`Vault execution module docs <vault-setup>` for details.
